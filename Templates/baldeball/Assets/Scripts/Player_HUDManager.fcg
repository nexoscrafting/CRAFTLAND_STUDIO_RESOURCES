import "StdLibrary.fcc" as stdLibrary
import "EditorGenLib.fcc" as editorGenLib
import "Workflow.fcc" as workflow
import Resources from "EditorGenLib.fcc" 
import "Hud.fcc" as hud 
import LobbyHUD from "EditorGenLib.fcc"
import GlobalRanking from "EditorGenLib.fcc"
import Global_SpawnPointManager from "EditorGenLib.fcc"
import TutorialBoardHUD from "EditorGenLib.fcc"
import NewAbilitySelectionPage from "EditorGenLib.fcc"
import HUD_WeaponPage from "EditorGenLib.fcc"
import HUD_AbilityPage from "EditorGenLib.fcc"
import HUD_LeaderBoard from "EditorGenLib.fcc"
import InsceneLeaderboard from "EditorGenLib.fcc"
import "Player.fcc" as player 
import "Combat.fcc" as combat
import Global_RankingData from "EditorGenLib.fcc"


graph Player_HUDManager {
    globalRanking CustomHud;
    tutorialBoard CustomHud;
    selectAbility CustomHud;
    abilitiesListView CustomHud;
    inventoryHUD CustomHud;
    lobbyHUD CustomHud;
    leaderboardHUD CustomHud;
    tutorialHUD CustomHud;
    insceneLeaderboad CustomHud;
    isPannelShow bool;

    func TurnOffHUD(){
        inventoryHUD<CustomHud>.Visibility = false;
        // lobbyHUD<CustomHud>.Visibility = false;
        abilitiesListView<CustomHud>.Visibility = false;
        selectAbility<CustomHud>.Visibility = false;
        leaderboardHUD<CustomHud>.Visibility = false;

    }
    func TurnOffDefaultHUD(){
        SetDefaultHudSwitch(thisEntity<Player>,PlayerHudSwitchType:AttackHUD,CommonHudSwitchValue:Close);
        SetDefaultHudSwitch(thisEntity<Player>,PlayerHudSwitchType:SprintHUD,CommonHudSwitchValue:Close);
        SetDefaultHudSwitch(thisEntity<Player>,PlayerHudSwitchType:JumpHUD,CommonHudSwitchValue:Close);
        SetDefaultHudSwitch(thisEntity<Player>,PlayerHudSwitchType:CrouchHUD,CommonHudSwitchValue:Close);

    }
    func TurnOnDefaultHUD(){
        SetDefaultHudSwitch(thisEntity<Player>,PlayerHudSwitchType:AttackHUD,CommonHudSwitchValue:Show);
        SetDefaultHudSwitch(thisEntity<Player>,PlayerHudSwitchType:SprintHUD,CommonHudSwitchValue:Show);
        SetDefaultHudSwitch(thisEntity<Player>,PlayerHudSwitchType:JumpHUD,CommonHudSwitchValue:Show);
        SetDefaultHudSwitch(thisEntity<Player>,PlayerHudSwitchType:CrouchHUD,CommonHudSwitchValue:Show);
    }
   async func CreateHud(){
    
    if(lobbyHUD==nil){
        CreateCustomHud(out var createdHUD,thisEntity<Player>,Resources:IDCustomHUDDict["LobbyHUD"] as CustomHudID);
        lobbyHUD = createdHUD as CustomHud;
        lobbyHUD<LobbyHUD>.InitLobbyHUD(thisEntity<Player>);
        lobbyHUD<LobbyHUD>.UpdateGoldText();
    }
    WaitForNextFrame();
        if(inventoryHUD==nil){
            LogInfo("create hud");
            CreateCustomHud(out var createdHUD,thisEntity<Player>,Resources:IDCustomHUDDict["InventoryHUD"] as CustomHudID);
            inventoryHUD = createdHUD as CustomHud;
            inventoryHUD<HUD_WeaponPage>.InitWeaponListView(thisEntity<Player>);
            inventoryHUD<CustomHud>.Visibility = false;
            LogInfo("hide inventory");
        }
        if(abilitiesListView==nil){
            CreateCustomHud(out var createdHUD,thisEntity<Player>,Resources:IDCustomHUDDict["AbilityListView"] as CustomHudID);
            abilitiesListView = createdHUD as CustomHud;
            abilitiesListView<HUD_AbilityPage>.InitAbilityListView(thisEntity<Player>);
            abilitiesListView<CustomHud>.Visibility = false;
        }
        if(leaderboardHUD==nil){
            CreateCustomHud(out var createdHUD,thisEntity<Player>,Resources:IDCustomHUDDict["LeaderboardHUD"] as CustomHudID);
            leaderboardHUD = createdHUD as CustomHud;
            leaderboardHUD<HUD_LeaderBoard>.InitLeaderboard(thisEntity<Player>);
            leaderboardHUD<CustomHud>.Visibility = false;
        }
        start WaitForNextFrame();
        if(selectAbility==nil){
            CreateCustomHud(out var createdHUD,thisEntity<Player>,Resources:IDCustomHUDDict["SelectAbiltiy"] as CustomHudID);
            selectAbility = createdHUD as CustomHud;
            selectAbility<NewAbilitySelectionPage>.InitAbilitySelectionPage(thisEntity<Player>);
            selectAbility<CustomHud>.Visibility = false;
            if(globalEntity<Global>.CurrentPhaseIndex==Resources:phaseIndexEnum["StageStart"]){
                selectAbility<CustomHud>.Visibility = true;
                selectAbility<NewAbilitySelectionPage>.GetRandomAbility();
            }
            
        }
        if(tutorialBoard==nil){
            CreateCustomHud(out var createdHUD,thisEntity<Player>,Resources:IDCustomHUDDict["TutorialBoard"] as CustomHudID);
            tutorialBoard = createdHUD as CustomHud;
            tutorialBoard<TutorialBoardHUD>.InitTutorialBoard(globalEntity<Global_SpawnPointManager>.GetTutorialBoardPosition());
        }
        if(insceneLeaderboad==nil){
            CreateCustomHud(out var createdHUD,thisEntity<Player>,Resources:IDCustomHUDDict["InsceneLeaderboard"] as CustomHudID);
            insceneLeaderboad = createdHUD as CustomHud;
            insceneLeaderboad<InsceneLeaderboard>.InitLeaderboard(thisEntity<Player>);
            insceneLeaderboad<InsceneLeaderboard>.InitInsceneLeaderboard();
        }    
        if(globalRanking==nil){
            CreateCustomHud(out var outHUD, thisEntity<Player>,Resources:IDCustomHUDDict["GlobalRanking"] as CustomHudID);
            globalRanking = outHUD as CustomHud;
            globalRanking<GlobalRanking>.InitGlobalRankingBoard(thisEntity<Player>);
            globalRanking<GlobalRanking>.UpdateGlobalRanking(globalEntity<Global_RankingData>.rankingDataList);
        }
        start WaitForNextFrame();
        
        if(tutorialHUD==nil){
            CreateCustomHud(out var createdHUD,thisEntity<Player>,Resources:IDCustomHUDDict["TutorialHUD"] as CustomHudID);
            tutorialHUD = createdHUD as CustomHud;
            tutorialHUD<CustomHud>.Visibility = false;
        }
        WaitForSeconds(1000);
        inventoryHUD<HUD_WeaponPage>.UpdateEquipView(thisEntity<Player>.currentWeaponEquip);
    }
    func HideCustomHUD(customHUD CustomHudID){
        if(customHUD==Resources:IDCustomHUDDict["InventoryHUD"] as CustomHudID){
            inventoryHUD<CustomHud>.Visibility = false;
        }else if(customHUD==Resources:IDCustomHUDDict["AbilityListView"] as CustomHudID){
            abilitiesListView<CustomHud>.Visibility = false;
        }else if(customHUD==Resources:IDCustomHUDDict["LeaderboardHUD"] as CustomHudID){
            leaderboardHUD<CustomHud>.Visibility = false;
        }else if(customHUD==Resources:IDCustomHUDDict["TutorialHUD"] as CustomHudID){
            tutorialHUD<CustomHud>.Visibility = false;
        }
        if(customHUD!=Resources:IDCustomHUDDict["SelectAbiltiy"] as CustomHudID && globalEntity<Global>.CurrentPhaseIndex==Resources:phaseIndexEnum["StageStart"]){
            selectAbility<NewAbilitySelectionPage>.TurnOnHud();
            isPannelShow = false;
        }
    }
    event OnAwake() {
        TurnOffDefaultHUD();
    }
    event OnBeKilled(attacker entity<Entity>, damageType DamageType, beDamagedPart HitBodyPart) {
        lobbyHUD<LobbyHUD>.TurnOffListView();
        lobbyHUD<CustomHud>.Visibility = true;
    }
    event OnPhaseStart(phase entity<Phase>) {

        if(phase<Phase>.PhaseIndex==Resources:phaseIndexEnum["StageStart"]){
            selectAbility<NewAbilitySelectionPage>.GetRandomAbility();
            WaitForNextFrame();
            TurnOffHUD();
            TurnOffDefaultHUD();
            globalRanking<GlobalRanking>.UpdateGlobalRanking(globalEntity<Global_RankingData>.rankingDataList);
            lobbyHUD<LobbyHUD>.UpdateGoldText();
            lobbyHUD<LobbyHUD>.FloatingTokkenText(); 
            abilitiesListView<HUD_AbilityPage>.CheckItemMeetCondition();
            inventoryHUD<HUD_WeaponPage>.CheckItemMeetCondition();
            WaitForSeconds(1000);
            if(!isPannelShow){
                selectAbility<CustomHud>.Visibility = true;
            }

        }else if(phase<Phase>.PhaseIndex==Resources:phaseIndexEnum["StageInProgress"]){
            TurnOffHUD();
            TurnOnDefaultHUD();
        }else if (phase<Phase>.PhaseIndex==Resources:phaseIndexEnum["StageEnds"]){
            start WaitForSeconds(5000);
            leaderboardHUD<CustomHud>.Visibility = true;
            lobbyHUD<LobbyHUD>.TurnOffListView();

        }
    }
    event OnGameEnd() {
        TurnOffHUD();
    }
    event ShowCustomHUD(HUDid CustomHudID) {
        TurnOffHUD();
        if(HUDid==Resources:IDCustomHUDDict["InventoryHUD"] as CustomHudID){
            inventoryHUD<CustomHud>.Visibility = true;
        }else if(HUDid==Resources:IDCustomHUDDict["AbilityListView"] as CustomHudID){
            abilitiesListView<CustomHud>.Visibility = true;
        }else if (HUDid==Resources:IDCustomHUDDict["LeaderboardHUD"] as CustomHudID){
            leaderboardHUD<CustomHud>.Visibility = true;
        }else if(HUDid==Resources:IDCustomHUDDict["TutorialHUD"] as CustomHudID){
            tutorialHUD<CustomHud>.Visibility = true;
        }
        isPannelShow = true;
    }

    event hideCustomHUD(customHUD CustomHudID) {
        HideCustomHUD(customHUD);
    }
    event OnDataCompleteLoad() {
       start CreateHud();
    }
    event updateGoldQuantity() {
        lobbyHUD<LobbyHUD>.UpdateGoldTextFirstTime();
    }
    event OnAbilityUnlockConditionCheck(isMeetCondition bool) {
        lobbyHUD<LobbyHUD>.BlinkRedDotAbilitiesButton(isMeetCondition);
    }
    event OnWeaponUnlockConditionCheck(isMeetCondition bool) {
        lobbyHUD<LobbyHUD>.BlinkRedDotWeaponButton(isMeetCondition);
    }
    event OnItemUnlocked() {
        abilitiesListView<HUD_AbilityPage>.CheckItemMeetCondition();
        inventoryHUD<HUD_WeaponPage>.CheckItemMeetCondition();

    }
    event OnPlayerUnlockAbility() {
        if(globalEntity<Global>.CurrentPhaseIndex==Resources:phaseIndexEnum["StageStart"]){
            HideCustomHUD(Resources:IDCustomHUDDict["AbilityListView"] as CustomHudID);
            lobbyHUD<LobbyHUD>.TurnOffListView();
            selectAbility<NewAbilitySelectionPage>.GetRandomAbility();
        }
    }
}