import "StdLibrary.fcc" as stdLibrary
import "EditorGenLib.fcc" as editorGenLib
import Ball_Manager from "EditorGenLib.fcc"
import Player_Ability from "EditorGenLib.fcc"
import Player_Config from "EditorGenLib.fcc"
import Ball_Manager from "EditorGenLib.fcc"
import Resources from "EditorGenLib.fcc"
import "Player.fcc" as player 
import "Physics.fcc" as physics 
import "LevelObject.fcc" as levelObject 
import "Combat.fcc" as combat 
import "Playable.fcc" as playable 
import "./VisualEffectUtils.fcg" as visualEffectUtils
import "./TextObjectUtils.fcg" as textObjectUtils
import "./MotionUtils.fcg" as motionUtils
import Global_BallManager from "EditorGenLib.fcc"
import "Workflow.fcc" as workflow 


graph SlowBall_Ability {

    isUsingSkill bool;
    auraEffect EffectEntity;
    auraFollowMotion PositionFollow;
    textObject TextEntity;
    event OnFire() {
        SphereOverlap(thisEntity<Player>.hitRange,thisEntity<Player>.Position+Vector3{0, 0.5, 0},List<int>{1},false,out var listOfEntity);

        for key, ball in listOfEntity {
            DispatchEvent(OnPlayerHitTheBall,ball<Entity>,List<object>{thisEntity<Player>,nil});
            if(thisEntity<Player_Ability>.isSlowBallActive){
                TurnOffEffect();
                thisEntity<Player_Ability>.FinishUsingSkillSlowBall();
            }
        }
        
    }
    event OnRoundEnd(roundIndex int) {
        DeleteAllEffect();
    }

    event OnBeKilled(attacker entity<Entity>, damageType DamageType, beDamagedPart HitBodyPart) {
        DeleteAllEffect();
    }

    event OnPlayerUseAbility() {
        CastSlowdown();
    }
    event OnPhaseStart(phase entity<Phase>) {
        if (phase<Phase>.PhaseIndex==Resources:phaseIndexEnum["StageEnds"]){
            LogInfo("Delete this ability");
            DeleteAllEffect();
        }
    }

    event OnTakeDamage(attacker entity<Entity>, damageType DamageType, value int, beDamagedPart HitBodyPart) {
        TurnOffEffect();
        thisEntity<Player_Ability>.FinishUsingSkillSlowBall();
    }

    async func CastSlowdown(){

        TurnOnEffect();
        PlaySound(thisEntity<Player>,SoundEffects:GearSwitchedOn);
        thisEntity<Player_Ability>.ActiveSlowBall();
        if(textObject==nil){
            textObject = textObjectUtils:CreateText(Resources:skillNameLocalization["Slowdown"],#000000FF,thisEntity<Player>.Position);
        }
        start motionUtils:FloatingTextMotion(textObject,1000,thisEntity<Player>.Position);        
        globalEntity<Global_BallManager>.ballRef<Ball_Manager>.ActiveSlowdownEffect(thisEntity<Player>);
    }

    func TurnOnEffect(){

        if(auraEffect==nil){
            auraEffect = visualEffectUtils:CreateVisualEffectSelf(EffectType:Frozen,#F5F5F5FF,Vector3{2, 2, 2},Vector3{0, 0, 0},thisEntity<Player>) as EffectEntity;
            auraFollowMotion = visualEffectUtils:CraeateEffectEntityFollowPlayer(auraEffect<EffectEntity>,thisEntity<Entity>,Vector3{0, .8, 0});
        }else{
            SetActive(auraEffect<Entity>,true);
        }

    }
    func TurnOffEffect(){
       
        SetActive(auraEffect<Entity>,false);
    }

    async func DeleteAllEffect(){
        thisEntity<Player_Ability>.FinishUsingSkillSlowBall();
        DeleteEntity(auraEffect<Entity>);
        DeleteEntity(auraFollowMotion<Entity>);
        DeleteEntity(textObject<Entity>);
        WaitForNextFrame();

        thisEntity<Player_Ability>.DeleteCurrentAbility();

    }

}