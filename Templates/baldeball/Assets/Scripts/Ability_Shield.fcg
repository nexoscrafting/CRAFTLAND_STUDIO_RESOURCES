import "StdLibrary.fcc" as stdLibrary
import "EditorGenLib.fcc" as editorGenLib
import Ball_Manager from "EditorGenLib.fcc"
import Player_Ability from "EditorGenLib.fcc"
import Player_Config from "EditorGenLib.fcc"
import Ball_Manager from "EditorGenLib.fcc"
import "Physics.fcc" as physics 
import "LevelObject.fcc" as levelObject 
import "Combat.fcc" as combat 
import "Playable.fcc" as playable 
import "./VisualEffectUtils.fcg" as visualEffectUtils
import "Workflow.fcc" as workflow 
import Player_InteractBall from "EditorGenLib.fcc"
import Resources from "EditorGenLib.fcc"
import "./MotionUtils.fcg" as motionUtils
import "./TextObjectUtils.fcg" as textObjectUtils
import  "Player.fcc" as player

graph Shield_Ability {
    isUsingSkill bool;
    auraEffect EffectEntity;
    auraFollowMotion PositionFollow;
    textObject TextEntity;

    event OnFire() {
        SphereOverlap(thisEntity<Player>.hitRange,thisEntity<Player>.Position+Vector3{0, 0.5, 0},List<int>{1},false,out var listOfEntity);
        for key, ball in listOfEntity {
            DispatchEvent(OnPlayerHitTheBall,ball<Entity>,List<object>{thisEntity<Player>,nil});
        }
    }
    event OnTheBallHitPlayer(ball object) {
        if(isUsingSkill){
            DispatchEvent(OnPlayerHitTheBall,ball<Entity>,List<object>{thisEntity<Player>,Resources:abilityEnum["Shield"]});
            if(textObject==nil){
                textObject = textObjectUtils:CreateText(Resources:skillNameLocalization["Shield"],#FFFF0FFF,thisEntity<Player>.Position);
            }
            start motionUtils:FloatingTextMotion(textObject,1000,thisEntity<Player>.Position);
            isUsingSkill = false;
            TurnOffEffect();
            thisEntity<Player_Ability>.StartCD();
        }else{
            thisEntity<Player_InteractBall>.GetBallExplodeDamage(ball<Ball_Manager>.GetCurrentPlayerHit(),ball<Ball_Manager>.currentDamage);
            ball<Ball_Manager>.ExplodeAtTarget(thisEntity<Player>);
        }
    }
   
    event OnRoundEnd(roundIndex int) {
        DeleteAllEffect();
    }

    event OnBeKilled(attacker entity<Entity>, damageType DamageType, beDamagedPart HitBodyPart) {
        LogInfo("Delete Effect");
        DeleteAllEffect();
    }

    event OnPlayerUseAbility() {
        isUsingSkill = true;
        TurnOnEffect();

    }
    event OnPhaseStart(phase entity<Phase>) {
        if (phase<Phase>.PhaseIndex==Resources:phaseIndexEnum["StageEnds"]){
            LogInfo("Delete this ability");

            DeleteAllEffect();
        }
    }

    func TurnOnEffect(){
        if(auraEffect==nil){
            auraEffect = visualEffectUtils:CreateVisualEffect(EffectType:Sphere,#FFEE00FF,Vector3{1, 2, 1},Vector3{0, 0, 0}) as EffectEntity;
            auraFollowMotion = visualEffectUtils:CraeateEffectEntityFollowPlayer(auraEffect<EffectEntity>,thisEntity<Entity>,Vector3{0, .8, 0});
        }else{
            SetActive(auraEffect<Entity>,true);
        }

    }
    func TurnOffEffect(){
        
        SetActive(auraEffect<Entity>,false);
    }

    async func DeleteAllEffect(){
        DeleteEntity(auraEffect<Entity>);
        DeleteEntity(auraFollowMotion<Entity>);
        DeleteEntity(textObject<Entity>);
        WaitForNextFrame();

        thisEntity<Player_Ability>.DeleteCurrentAbility();

    }
}