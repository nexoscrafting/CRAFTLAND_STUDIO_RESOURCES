import "StdLibrary.fcc" as stdLibrary
import "EditorGenLib.fcc" as editorGenLib
import Ball_Manager from "EditorGenLib.fcc"
import Player_Ability from "EditorGenLib.fcc"
import Player_Config from "EditorGenLib.fcc"
import Ball_Manager from "EditorGenLib.fcc"
import Resources from "EditorGenLib.fcc"
import Player_HitableZoneVisual from "EditorGenLib.fcc"
import Player_SpecialEffect from "EditorGenLib.fcc"
import Global_ItemManager from "EditorGenLib.fcc"
import "Physics.fcc" as physics 
import "LevelObject.fcc" as levelObject 
import "Combat.fcc" as combat 
import "Playable.fcc" as playable 
import "./VisualEffectUtils.fcg" as visualEffectUtils
import "Workflow.fcc" as workflow 
import "./MotionUtils.fcg" as motionUtils 
import "./TextObjectUtils.fcg" as textObjectUtils
import "Player.fcc" as player

graph Limitless_Ability {
    
    isUsingSkill bool;
    auraEffect EffectEntity;
    auraFollowMotion PositionFollow;
    textObject TextEntity;

    event OnFire() {
        SphereOverlap(thisEntity<Player>.hitRange,thisEntity<Player>.Position+Vector3{0, 0.5, 0},List<int>{1},false,out var listOfEntity);
            for key, ball in listOfEntity {
                DispatchEvent(OnPlayerHitTheBall,ball<Entity>,List<object>{thisEntity<Player>,nil});
            }
    }

    event OnRoundEnd(roundIndex int) {
        DeleteAllEffect();
    }

    event OnBeKilled(attacker entity<Entity>, damageType DamageType, beDamagedPart HitBodyPart) {
      
            DeleteAllEffect();
    }
    event OnPhaseStart(phase entity<Phase>) {
        LogInfo("Phase");
        if (phase<Phase>.PhaseIndex==Resources:phaseIndexEnum["StageEnds"]){
            LogInfo("Delete this ability");
            DeleteAllEffect();
        }
    }

    event OnPlayerUseAbility() {
        PlaySound(thisEntity<Player>,SoundEffects:Triggers);
        TurnOnEffect();
        thisEntity<Player_Ability>.StartCD();
        
        thisEntity<Player>.RunSpeedScale+=0.3;
        thisEntity<Player>.hitRange+=2;
        thisEntity<Player_HitableZoneVisual>.InitZone();
        WaitForSeconds(5000);
        thisEntity<Player>.RunSpeedScale = globalEntity<Global_ItemManager>.GetWeaponMovementSpeed(thisEntity<Player>.currentWeaponEquip);;
        thisEntity<Player>.hitRange = globalEntity<Global_ItemManager>.GetWeaponRange(thisEntity<Player>.currentWeaponEquip);;
        thisEntity<Player_HitableZoneVisual>.InitZone();
        TurnOffEffect();
    }
    func TurnOnEffect(){
        if(textObject==nil){
            textObject = textObjectUtils:CreateText(Resources:skillNameLocalization["Limitless"],#11FF00FF,thisEntity<Player>.Position);
        }
        start motionUtils:FloatingTextMotion(textObject,1000,thisEntity<Player>.Position);   
        if(auraEffect==nil){
            auraEffect = visualEffectUtils:CreateVisualEffect(EffectType:UpwardTurbulence,#00FF62B2,Vector3{1, 2, 1},Vector3{0, 0, 0}) as EffectEntity;
            auraFollowMotion = visualEffectUtils:CraeateEffectEntityFollowPlayer(auraEffect<EffectEntity>,thisEntity<Entity>,Vector3{0, .8, 0});
        }else{
            SetActive(auraEffect<Entity>,true);
        }
    }

    func TurnOffEffect(){
        SetActive(auraEffect<Entity>,false);
    }
    async func DeleteAllEffect(){
        thisEntity<Player>.RunSpeedScale = globalEntity<Global_ItemManager>.GetWeaponMovementSpeed(thisEntity<Player>.currentWeaponEquip);;
        thisEntity<Player>.hitRange = globalEntity<Global_ItemManager>.GetWeaponRange(thisEntity<Player>.currentWeaponEquip);;
        thisEntity<Player_HitableZoneVisual>.InitZone();
        DeleteEntity(auraEffect<Entity>);
        DeleteEntity(auraFollowMotion<Entity>);
        DeleteEntity(textObject<Entity>);
        WaitForNextFrame();
        thisEntity<Player_Ability>.DeleteCurrentAbility();

    }

}