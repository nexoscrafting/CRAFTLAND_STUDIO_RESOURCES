import "StdLibrary.fcc" as std
import "Math.fcc" as math
import "Map.fcc" as map
import "List.fcc" as list
import "Player.fcc" as player
import "Combat.fcc" as combat
import "EditorGenLib.fcc" as gen
import "Physics.fcc" as physics
import "Workflow.fcc" as workflow
import Resources as Res from "EditorGenLib.fcc"
import "./EventBusTool.fcg" as eventBus
import "./ConstValues.fcg" as const

static graph SceneMgr {
    //Dictionary of destructible bricks on the map
    CubeMapping Map<int, entity>
    Radius int = 5

    func CalcIndex(x int, z int) int {
        return (x+Radius)*Radius*2+z
    }

    async func InitLevel1() {
        LogInfo("InitLevel1 ...")
        globalEntity<Global>.CurrentLevel = 1
        SetGameCanMove(false)
        //Initialize scene bricks and store them in the dictionary
        CubeMapping = map.Create()
        var randMin = -(Radius/2)
        var randMax = (Radius/2)+1
        //Randomly decide which blocks are special
        var randX = math.RandomInt(randMin, randMax)*2+1
        var randZ = math.RandomInt(randMin, randMax)*2+1
        for x = -Radius, Radius+1, 2 {
            for z = -Radius, Radius+1, 2 {
                CreateFromPrefab(out var cube, Res.PrefabItems[EPrefab.SceneCube])
                cube<Transform>.Position = Vector3{x, 0, z}
                CubeMapping[CalcIndex(x, z)] = cube
                //Block set as key entry
                if x == randX && z == randZ {
                    AddTag(cube, const.TagKeyCube)
                    cube<SceneCubeEffect>.CubeEffectID = Res.CubeEft_KeyCube
                }else {
                    //Randomly determine whether it is a item block or a normal block
                    if math.RandomFloat(0, 1) > 0.7 {
                        //There is a 30% probability of it being a item block, and the specific item type will be randomly selected.
                        var itemTypeRandomV = math.RandomFloat(0, 1)
                        if itemTypeRandomV > 0.8 {
                            cube<SceneCubeEffect>.ItemEffectID = Res.ItemEft_MulBomb
                        }else if itemTypeRandomV > 0.5 {
                            cube<SceneCubeEffect>.ItemEffectID = Res.ItemEft_ExplodeSize
                        } else {
                            cube<SceneCubeEffect>.ItemEffectID = Res.ItemEft_MoveSpeed
                        }
                        cube<SceneCubeEffect>.CubeEffectID = Res.CubeEft_ItemCube
                    }
                }
                var cubeEffectID = cube<SceneCubeEffect>.CubeEffectID
                //Finally, mount different function scripts according to different blocks.
                if cubeEffectID > 0 {
                    //The mapping relationship between EffectID and script is registered in Resouces.eca
                    if ContainKey(Res.Scripts, cubeEffectID) {
                        AddScript(cube, Res.Scripts[cubeEffectID])
                    }
                }
                DispatchEvent(gen.OnSceneCubeCreated, cube, nil)
            }
            //Avoid excessive single frame load and cycle limit
            WaitForNextFrame()
        }
        SetGameCanMove(true)
    }

    async func ShowGameTips() {
        var tips = List<string>{"Gameplay Introduction, For ease of understanding, we have simplified.",
         "Green blocks will drop special props when they are destroyed.", 
         "When the red block is destroyed, it will drop the key and open the portal.",
         "The player who carries the key successfully reaches the portal to win."}
        for i, tip in tips {
            for i, player in GetAllPlayers() {
                ShowTips(player, tip, #FFFFFFFF, 3000)
            }
            WaitForSeconds(1500)
        }
    }

    event OnGameEnd() {
        eventBus.DispatchEvent2Players(OnMyGameEnd, nil)
    }
    
    event OnMyGameStart(level int){
        eventBus.DispatchEvent2Players(OnMyGameStart, List<object>{level})
        if level == 1 {
            wait InitLevel1()
        }
        //The default async function call is wait
        ShowGameTips()
    }

    event OnMyGameEnd() {
        eventBus.DispatchEvent2Players(OnMyGameEnd, nil)
        WaitForSeconds(3000)
        EndGameCurrentPhase()
    }
    
    event OnPlayerJoin(player entity<Player>) {
        ShowTips(player, "You joined the scripted demo game", #FFFFFFFF, 3000)
    }

    async func ExplodePlayer(player entity<Player>) {
        Kill(player)
        WaitForSeconds(3000)
        Revive(player)
    }

    //Bomb explosion interface for business scripts
    func BombExplode(pos Vector3, distance float) {
        var explodePos = List<Vector3>{}
        var radius = Ceil(distance / 2)
        for i = -radius, radius+1, 1 {
            Append(explodePos, pos+Vector3{i, 0, 0})
            Append(explodePos, pos+Vector3{0, 0, i})
        }
        for i, curPos in explodePos {
            var cubeIndex = CalcIndex(math.Round(curPos.X), math.Round(curPos.Z))
            if map.ContainKey(CubeMapping, cubeIndex) {
                DeleteEntity(CubeMapping[cubeIndex])
                map.Delete(CubeMapping, cubeIndex)
            }
        }
        for i, player in GetAllPlayers() {
            if !physics.IsEntityInsideBox(player, pos, distance, 1, 1, Vector3{0,0,0}) && !physics.IsEntityInsideBox(player, pos, 1, distance, 1, Vector3{0,0,0}) {
                continue
            }
            start ExplodePlayer(player)
        }
    }
}